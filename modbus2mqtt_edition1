#include <errno.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <mosquitto.h>

static int run = -1;
static int sent_mid;
struct mosquitto *mosq;
static int recevidMessage_B = 0;//收到消息B标志 0表示没有收到

static int recevidMessage_D = 0;

static int recevidMessage_T = 0;

static int recevidMessage_L = 0;


/*
 * 构建 消息内容 和 发送消息 函数
 */
void sengMessage_C()

{

	mosquitto_publish(mosq, &sent_mid, "LD/TTTTTT/P/C", strlen("C"), "C", 0, false);

}

void sengMessage_H()

{

	mosquitto_publish(mosq, &sent_mid, "LD/TTTTTT/P/C", strlen("H"), "H", 0, false);

}




void on_connect(struct mosquitto *mosq, void *obj, int rc)
{
	if (rc){
		exit(1);
	}
	else{
		mosquitto_subscribe(mosq, NULL,"LD/TTTTTT/P/B",0);
		mosquitto_subscribe(mosq, NULL, "LD/TTTTTT/P/D", 0);
		mosquitto_subscribe(mosq, NULL, "LD/TTTTTT/P/T", 0);
		mosquitto_subscribe(mosq, NULL, "LD/TTTTTT/P/L", 0);
		mosquitto_publish(mosq, &sent_mid, "LD/TTTTTT/P/A", strlen("message"), "message", 0, false);
	}
}

void my_message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *msg)

{

	if (strcmp(msg->topic,"LD/TTTTTT/P/B")==0)

	{

		recevidMessage_B = 1;

	}

	else if (strcmp(msg->topic, "LD/TTTTTT/P/D") == 0)

	{

		recevidMessage_D = 1;

	}

	else if (strcmp(msg->topic, "LD/TTTTTT/P/T") == 0)

	{

		recevidMessage_T = 1;

	}

	else if (strcmp(msg->topic, "LD/TTTTTT/P/L") == 0)

	{

		recevidMessage_L = 1;

	}

	else

	{

		//do nothing

	}

	//mosquitto_disconnect(mosq); 

	//printf("%s\n",msg->topic);测试时加进来的

	

}

void on_disconnect(struct mosquitto *mosq, void *obj, int rc)
{
	run = rc;
}

int main(int argc, char *argv[])
{
	int rc;
	

	mosquitto_lib_init();

	mosq = mosquitto_new("gateway", true, NULL);

	/*
	 *Problem:waiting to improve
	 *Explaination:如果使用下面两个函数，我理解就是使用了openssl安全协议，在连接时会服务器
	 *				端会报错，“Socket error on client<unknown>,discounting”,应该是client需要
	 *				安全注册。注释掉这两个函数就能够连接成功了，安全方面的事情现在暂时先不管。
	 */
	//mosquitto_tls_opts_set(mosq, 1, "tlsv1", NULL);  //Set advanced SSL / TLS options.Must be called before <mosquitto_connect>.
	//rc = mosquitto_tls_psk_set(mosq, "deadbeef", "psk-id", NULL);
	//if (rc){
	//	mosquitto_destroy(mosq);
	//	return rc;
	//}
	mosquitto_connect_callback_set(mosq, on_connect); //过程是这样：（1）我们调用mosquitto_connect函数，向broker请求连接
																  //（2）broker返回一个CONNACK信息
																  //（3）收到CONNACK信息后，调用该回调函数，回调函数又会调用on_connect函数。
	mosquitto_disconnect_callback_set(mosq, on_disconnect);//当broker收到DISCONNECT命令并且断开client的时候调用
	//mosquitto_publish_callback_set(mosq, on_publish);   // publish完就调用这个函数

	mosquitto_message_callback_set(mosq, my_message_callback);//当broker发送信息，我们接收到的时候，就调用该函数

	rc = mosquitto_connect(mosq, "192.168.1.250", 1883, 60);
	if (rc){
		mosquitto_destroy(mosq);
		return rc;
	}

	while (run == -1){
		mosquitto_loop(mosq, -1, 1);

		if (recevidMessage_B == 1)

		{

			recevidMessage_B = 0;

			printf("send message C \n");

			sengMessage_C();

		}

		if ((recevidMessage_D == 1) || (recevidMessage_T == 1))

		{//转发表中			实时数据

			printf("send message D or T \n");

			recevidMessage_D = 0;

			recevidMessage_T = 0;

			sengMessage_H();

		}

		if (recevidMessage_L == 1)

		{

			recevidMessage_L = 0;

			//收到下行命令 暂时未处理

		}
	}

	mosquitto_destroy(mosq);

	mosquitto_lib_cleanup();
	return run;
}
